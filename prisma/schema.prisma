// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // change to "postgresql" if needed
  url      = env("DATABASE_URL")
}

enum Progress {
  COMPLETED
  PENDING
  IN_PROGRESS
}

enum TagKeyword {
  RESPONSIBLE
  COMMUNICATIVE
  POLITE
  FAST
  KNOWLEDGEABLE
  EFFICIENT
}

model TempSession {
  id         Int      @id @default(autoincrement())
  email      String?   @unique
  phone      String?  @unique
  otp        String   @unique
  verified   Boolean  @default(false)
  otpExpires DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  password        String
  email           String?           @unique
  emailVerified   Boolean          @default(false)
  phone           String?           @unique
  phoneVerified   Boolean          @default(false)
  dob             DateTime
  profilePic      String?
  addresses       Address[]        // one-to-many
  orders          Order[]          @relation("UserOrders")
  reviewsGiven    Review[]         @relation("ReviewByUser")
  feedback        OverallService?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  refreshToken    String?
  promoCodes      PromoCode[]      @relation("UserPromoCodes")
}

model Employee {
  id              Int              @id @default(autoincrement())
  name            String
  password        String
  email           String           @unique
  emailVerified   Boolean          @default(false)
  phone           String
  phoneVerified   Boolean          @default(false)
  dob             DateTime
  profilePic      String?
  address         Address[]        // one-to-many
  ordersHandled   Order[]          @relation("OrdersHandledBy")
  reviewsReceived Review[]         @relation("ReviewForEmployee")
  tagsReceived    Tag[]            // tags from reviews
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  refreshToken    String?
  isAdmin         Boolean          @default(false)
  services        Service[]        @relation("EmployeeServices")
}

model Address {
  id          Int       @id @default(autoincrement())
  line1       String
  line2       String?
  city        String
  state       String
  pin         String
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  employee    Employee? @relation(fields: [employeeId], references: [id])
  employeeId  Int?
  isPermanent Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id           Int        @id @default(autoincrement())
  user         User       @relation("UserOrders", fields: [userId], references: [id])
  userId       Int
  employee     Employee?  @relation("OrdersHandledBy", fields: [employeeId], references: [id])
  employeeId   Int?
  progress     Progress   @default(PENDING)
  amount       Float
  issueDetails String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  services     Service[]  @relation("OrderServices")
}

model Review {
  id          Int       @id @default(autoincrement())
  user        User      @relation("ReviewByUser", fields: [userId], references: [id])
  userId      Int
  employee    Employee   @relation("ReviewForEmployee", fields: [employeeId], references: [id])
  employeeId  Int
  stars       Float
  comment     String?
  tags        Tag[]      // 1-3 tags per review
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Tag {
  id          Int         @id @default(autoincrement())
  keyword     TagKeyword
  review      Review      @relation(fields: [reviewId], references: [id])
  reviewId    Int
  employee    Employee    @relation(fields: [employeeId], references: [id])
  employeeId  Int
  createdAt   DateTime    @default(now())
}

model OverallService {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @unique
  stars      Float
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Categories {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  services   Service[]
}

model Service {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category    Categories @relation(fields: [categoryId], references: [id])
  employees  Employee[] @relation("EmployeeServices")
  orders     Order[]  @relation("OrderServices")
  promoCodes PromoCode[] @relation("PromoCodeServices")
}

model PromoCode {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  services   Service[] @relation("PromoCodeServices")
  users      User[]    @relation("UserPromoCodes")
}


